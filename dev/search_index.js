var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Dizkord","category":"page"},{"location":"#Dizkord","page":"Home","title":"Dizkord","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Dizkord.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Dizkord]","category":"page"},{"location":"#Dizkord.STYLES","page":"Home","title":"Dizkord.STYLES","text":"Regex expressions for split_message to not break Discord formatting.\n\n\n\n\n\n","category":"constant"},{"location":"#Dizkord.AbstractGuild","page":"Home","title":"Dizkord.AbstractGuild","text":"A Discord guild (server). Can either be an UnavailableGuild or a Guild.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ActionType","page":"Home","title":"Dizkord.ActionType","text":"AuditLog action types. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Activity","page":"Home","title":"Dizkord.Activity","text":"A User activity. More details here.\n\nFields\n\nname           :: String\ntype           :: Dizkord.ActivityType\nurl            :: OptionalNullable{String}\ntimestamps     :: Optional{Dizkord.ActivityTimestamps}\napplication_id :: Optional{Snowflake}\ndetails        :: OptionalNullable{String}\nstate          :: OptionalNullable{String}\nemoji          :: OptionalNullable{Dizkord.ActivityEmoji}\nparty          :: Optional{Dizkord.ActivityParty}\nassets         :: Optional{Dizkord.ActivityAssets}\nsecrets        :: Optional{Dizkord.ActivitySecrets}\ninstance       :: Optional{Bool}\nflags          :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ActivityAssets","page":"Home","title":"Dizkord.ActivityAssets","text":"Images and hover text for an Activity. More details here.\n\nFields\n\nlarge_image :: Optional{String}\nlarge_text  :: Optional{String}\nsmall_image :: Optional{String}\nsmall_text  :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ActivityEmoji","page":"Home","title":"Dizkord.ActivityEmoji","text":"Emoji for a custom Activity. More details here.\n\nFields\n\nname     :: String\nid       :: Optional{Snowflake}\nanimated :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ActivityFlags","page":"Home","title":"Dizkord.ActivityFlags","text":"Flags which indicate what an Activity payload contains. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ActivityParty","page":"Home","title":"Dizkord.ActivityParty","text":"The current party of an Activity's player. More details here.\n\nFields\n\nid   :: Optional{String}\nsize :: Optional{Vector{Int}}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ActivitySecrets","page":"Home","title":"Dizkord.ActivitySecrets","text":"Secrets for Rich Presence joining and spectating of an Activity. More details here.\n\nFields\n\njoin     :: Optional{String}\nspectate :: Optional{String}\nmatch    :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ActivityTimestamps","page":"Home","title":"Dizkord.ActivityTimestamps","text":"The start and stop times of an Activity. More details here.\n\nFields\n\nstart :: Optional{DateTime}\nstop  :: Optional{DateTime}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ActivityType","page":"Home","title":"Dizkord.ActivityType","text":"An Activity's type. Available values are AT_GAME, AT_STREAMING, AT_LISTENING, AT_WATCHING, and AT_COMPETING. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ApplicationCommand","page":"Home","title":"Dizkord.ApplicationCommand","text":"An Application Command. More details here.\n\nFields\n\nid                  :: OptionalNullable{Snowflake}\ntype                :: Optional{Dizkord.ApplicationCommandType}\napplication_id      :: Snowflake\nguild_id            :: Optional{Snowflake}\nname                :: String\ndescription         :: String\noptions             :: Optional{Vector{Dizkord.ApplicationCommandOption}}\ndefault_permissions :: Optional{Bool}\nversion             :: Optional{Snowflake}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ApplicationCommandChoice","page":"Home","title":"Dizkord.ApplicationCommandChoice","text":"Application Command Choice. More details here.\n\nFields\n\nname  :: String\nvalue :: Union{Number, String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ApplicationCommandOption","page":"Home","title":"Dizkord.ApplicationCommandOption","text":"Application Command Option. More details here.\n\nFields\n\nname          :: Optional{String}\ntype          :: Dizkord.OptionType\nvalue         :: Any\nrequired      :: Optional{Bool}\nchoices       :: Optional{Vector{Dizkord.ApplicationCommandChoice}}\noptions       :: Optional{Vector{Dizkord.ApplicationCommandOption}}\nchannel_types :: Optional{Vector{Dizkord.ChannelTypes}}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Attachment","page":"Home","title":"Dizkord.Attachment","text":"A Message attachment. More details here.\n\nFields\n\nid        :: Snowflake\nfilename  :: String\nsize      :: Int\nurl       :: String\nproxy_url :: String\nheight    :: Optional{Int}\nwidth     :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.AuditLog","page":"Home","title":"Dizkord.AuditLog","text":"An audit log. More details here.\n\nFields\n\nwebhooks          :: Vector{Dizkord.Webhook}\nusers             :: Vector{Dizkord.User}\naudit_log_entries :: Vector{Dizkord.AuditLogEntry}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.AuditLogChange","page":"Home","title":"Dizkord.AuditLogChange","text":"A change item in an AuditLogEntry.\n\nThe first type parameter is the type of new_value and old_value. The second is the type of the entity that new_value and old_value belong(ed) to.\n\nMore details here.\n\nFields\n\nnew_value :: Optional{T} where T\nold_value :: Optional{T} where T\nkey       :: String\ntype      :: Type{U} where U\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.AuditLogEntry","page":"Home","title":"Dizkord.AuditLogEntry","text":"An entry in an AuditLog. More details here.\n\nFields\n\ntarget_id   :: Nullable{Snowflake}\nchanges     :: Optional{Vector{Dizkord.AuditLogChange}}\nuser_id     :: Snowflake\nid          :: Snowflake\naction_type :: Dizkord.ActionType\noptions     :: Optional{Dizkord.AuditLogOptions}\nreason      :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.AuditLogOptions","page":"Home","title":"Dizkord.AuditLogOptions","text":"Optional information in an AuditLogEntry. More details here.\n\nFields\n\ndelete_member_days :: Optional{Int}\nmembers_removed    :: Optional{Int}\nchannel_id         :: Optional{Snowflake}\ncount              :: Optional{Int}\nid                 :: Optional{Snowflake}\ntype               :: Optional{Dizkord.OverwriteType}\nrole_name          :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Ban","page":"Home","title":"Dizkord.Ban","text":"A User ban. More details here.\n\nFields\n\nreason :: Nullable{String}\nuser   :: Dizkord.User\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.CacheFilter","page":"Home","title":"Dizkord.CacheFilter","text":"CacheFilter(f::Function) -> CacheFilter\n\nOnly store value v at key k if f(v) === true (k is always v.id).\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.CacheForever","page":"Home","title":"Dizkord.CacheForever","text":"CacheForever() -> CacheForever\n\nStore everything and never evict items from the cache.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.CacheLRU","page":"Home","title":"Dizkord.CacheLRU","text":"CacheLRU(size::Int) -> CacheLRU\n\nEvict the least recently used item from the cache when there are more than size items.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.CacheNever","page":"Home","title":"Dizkord.CacheNever","text":"CacheNever() -> CacheNever\n\nDon't store anything in the cache.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.CacheStrategy","page":"Home","title":"Dizkord.CacheStrategy","text":"A method of handling cache insertion and eviction.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.CacheTTL","page":"Home","title":"Dizkord.CacheTTL","text":"CacheTTL(ttl::Period) -> CacheTTL\n\nEvict items from the cache after ttl has elapsed.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ChannelTypes","page":"Home","title":"Dizkord.ChannelTypes","text":"A DiscordChannel's type. Prefix with CT_. See full list at https://discord.com/developers/docs/resources/channel#channel-object-channel-types\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Client","page":"Home","title":"Dizkord.Client","text":"Client(\n    token::String\n    application_id::Snowflake\n    intents::Int;\n    presence::Union{Dict, NamedTuple}=Dict(),\n    strategies::Dict{DataType, <:CacheStrategy}=Dict(),\n    version::Int=9,\n) -> Client\n\nA Discord bot. Clients can connect to the gateway, respond to events, and make REST API calls to perform actions such as sending/deleting messages, kicking/banning users, etc.\n\nBot Token\n\nA bot token can be acquired by creating a new application here. Make sure not to hardcode the token into your Julia code! Use an environment variable or configuration file instead.\n\nApplication ID\n\nThe application id for your bot can be found here.  Make sure not to hardcode the application id into your Julia code!  Use an environment variable or configuration file instead.\n\nIntents\n\nInteger representing intents. More information here.\n\nPresence\n\nThe presence keyword sets the bot's presence upon connection. It also sets defaults for future calls to set_game. The schema here must be followed.\n\nCache Control\n\nBy default, most data that comes from Discord is cached for later use. However, to avoid memory leakage, not all of it is kept forever. The default setings are to keep everything but Messages, which are deleted after 6 hours, forever. Although the default settings are sufficient for most workloads, you can specify your own strategies per type with the strategies keyword. Keys can be any of the following:\n\nGuild\nDiscordChannel\nMessage\nUser\nMember\nPresence\n\nFor potential values, see CacheStrategy.\n\nThe cache can also be disabled/enabled permanently and temporarily as a whole with enable_cache! and disable_cache!.\n\nAPI Version\n\nThe version keyword chooses the Version of the Discord API to use. Using anything but 9 is not officially supported by the Dizkord.jl developers.\n\nSharding\n\nSharding is handled automatically. The number of available processes is the number of shards that are created. See the sharding example for more details.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Connection","page":"Home","title":"Dizkord.Connection","text":"A User connection to an external service (Twitch, YouTube, etc.). More details here.\n\nFields\n\nid           :: String\nname         :: String\ntype         :: String\nrevoked      :: Bool\nintegrations :: Vector{Dizkord.Integration}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.DiscordChannel","page":"Home","title":"Dizkord.DiscordChannel","text":"A Discord channel. More details here.\n\nNote: The name Channel is already used, hence the prefix.\n\nFields\n\nid                    :: Snowflake\ntype                  :: Dizkord.ChannelTypes\nguild_id              :: Optional{Snowflake}\nposition              :: Optional{Int}\npermission_overwrites :: Optional{Vector{Dizkord.Overwrite}}\nname                  :: Optional{String}\ntopic                 :: OptionalNullable{String}\nnsfw                  :: Optional{Bool}\nlast_message_id       :: OptionalNullable{Snowflake}\nbitrate               :: Optional{Int}\nuser_limit            :: Optional{Int}\nrate_limit_per_user   :: Optional{Int}\nrecipients            :: Optional{Vector{Dizkord.User}}\nicon                  :: OptionalNullable{String}\nowner_id              :: Optional{Snowflake}\napplication_id        :: Optional{Snowflake}\nparent_id             :: OptionalNullable{Snowflake}\nlast_pin_timestamp    :: OptionalNullable{DateTime}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Embed","page":"Home","title":"Dizkord.Embed","text":"A Message embed. More details here.\n\nFields\n\ntitle       :: Optional{String}\ntype        :: Optional{String}\ndescription :: Optional{String}\nurl         :: Optional{String}\ntimestamp   :: Optional{DateTime}\ncolor       :: Optional{Int}\nfooter      :: Optional{Dizkord.EmbedFooter}\nimage       :: Optional{Dizkord.EmbedImage}\nthumbnail   :: Optional{Dizkord.EmbedThumbnail}\nvideo       :: Optional{Dizkord.EmbedVideo}\nprovider    :: Optional{Dizkord.EmbedProvider}\nauthor      :: Optional{Dizkord.EmbedAuthor}\nfields      :: Optional{Vector{Dizkord.EmbedField}}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.EmbedAuthor","page":"Home","title":"Dizkord.EmbedAuthor","text":"An Embed's author information. More details here.\n\nFields\n\nname           :: Optional{String}\nurl            :: Optional{String}\nicon_url       :: Optional{String}\nproxy_icon_url :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.EmbedField","page":"Home","title":"Dizkord.EmbedField","text":"An Embed field. More details here.\n\nFields\n\nname   :: String\nvalue  :: String\ninline :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.EmbedFooter","page":"Home","title":"Dizkord.EmbedFooter","text":"An Embed's footer information. More details here.\n\nFields\n\ntext           :: String\nicon_url       :: Optional{String}\nproxy_icon_url :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.EmbedImage","page":"Home","title":"Dizkord.EmbedImage","text":"An Embed's image information. More details here.\n\nFields\n\nurl       :: Optional{String}\nproxy_url :: Optional{String}\nheight    :: Optional{Int}\nwidth     :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.EmbedProvider","page":"Home","title":"Dizkord.EmbedProvider","text":"An Embed's provider information. More details here.\n\nFields\n\nname :: Optional{String}\nurl  :: OptionalNullable{String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.EmbedThumbnail","page":"Home","title":"Dizkord.EmbedThumbnail","text":"An Embed's thumbnail image information. More details here.\n\nFields\n\nurl       :: Optional{String}\nproxy_url :: Optional{String}\nheight    :: Optional{Int}\nwidth     :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.EmbedVideo","page":"Home","title":"Dizkord.EmbedVideo","text":"An Embed's video information. More details here.\n\nFields\n\nurl    :: Optional{String}\nheight :: Optional{Int}\nwidth  :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Emoji","page":"Home","title":"Dizkord.Emoji","text":"An emoji. More details here.\n\nFields\n\nid             :: Nullable{Snowflake}\nname           :: String\nroles          :: Optional{Vector{Snowflake}}\nuser           :: Optional{Dizkord.User}\nrequire_colons :: Optional{Bool}\nmanaged        :: Optional{Bool}\nanimated       :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.ExplicitContentFilterLevel","page":"Home","title":"Dizkord.ExplicitContentFilterLevel","text":"A Guild's explicit content filter level. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Guild","page":"Home","title":"Dizkord.Guild","text":"A Discord guild (server). More details here.\n\nFields\n\nid                            :: Snowflake\nname                          :: String\nicon                          :: Nullable{String}\nsplash                        :: OptionalNullable{String}\nowner                         :: Optional{Bool}\nowner_id                      :: Optional{Snowflake}\npermissions                   :: Optional{String}\nregion                        :: Optional{String}\nafk_channel_id                :: OptionalNullable{Snowflake}\nafk_timeout                   :: Optional{Int}\nembed_enabled                 :: Optional{Bool}\nembed_channel_id              :: OptionalNullable{Snowflake}\nverification_level            :: Optional{Dizkord.VerificationLevel}\ndefault_message_notifications :: Optional{Dizkord.MessageNotificationLevel}\nexplicit_content_filter       :: Optional{Dizkord.ExplicitContentFilterLevel}\nroles                         :: Optional{Vector{Dizkord.Role}}\nemojis                        :: Optional{Vector{Dizkord.Emoji}}\nfeatures                      :: Optional{Vector{String}}\nmfa_level                     :: Optional{Dizkord.MFALevel}\napplication_id                :: OptionalNullable{Snowflake}\nwidget_enabled                :: Optional{Bool}\nwidget_channel_id             :: OptionalNullable{Snowflake}\nsystem_channel_id             :: OptionalNullable{Snowflake}\njoined_at                     :: Optional{DateTime}\nlarge                         :: Optional{Bool}\nunavailable                   :: Optional{Bool}\nmember_count                  :: Optional{Int}\nmax_members                   :: Optional{Int}\nvoice_states                  :: Optional{Vector{Dizkord.VoiceState}}\nmembers                       :: Optional{Vector{Dizkord.Member}}\nchannels                      :: Optional{Vector{Dizkord.DiscordChannel}}\npresences                     :: Optional{Vector{Dizkord.Presence}}\nmax_presences                 :: OptionalNullable{Int}\nvanity_url_code               :: OptionalNullable{String}\ndescription                   :: OptionalNullable{String}\nbanner                        :: OptionalNullable{String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.GuildEmbed","page":"Home","title":"Dizkord.GuildEmbed","text":"A Guild embed. More details here.\n\nFields\n\nenabled    :: Bool\nchannel_id :: Nullable{Snowflake}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Integration","page":"Home","title":"Dizkord.Integration","text":"A Guild integration. More details here.\n\nFields\n\nid                  :: Snowflake\nname                :: String\ntype                :: String\nenabled             :: Bool\nsyncing             :: Bool\nrole_id             :: Snowflake\nexpire_behaviour    :: Int\nexpire_grace_period :: Int\nuser                :: Dizkord.User\naccount             :: Dizkord.IntegrationAccount\nsynced_at           :: DateTime\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.IntegrationAccount","page":"Home","title":"Dizkord.IntegrationAccount","text":"An Integration account. More details here.\n\nFields\n\nid   :: String\nname :: String\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Interaction","page":"Home","title":"Dizkord.Interaction","text":"An interaction. More details here.\n\nFields\n\nid             :: Nullable{Snowflake}\napplication_id :: Nullable{Snowflake}\ntype           :: Dizkord.InteractionType\ndata           :: OptionalNullable{Dizkord.InteractionData}\nguild_id       :: Optional{Snowflake}\nchannel_id     :: Optional{Snowflake}\nmember         :: Optional{Dizkord.Member}\nuser           :: Optional{Dizkord.User}\ntoken          :: String\nversion        :: Optional{Int}\nmessage        :: Optional{Dizkord.Message}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.InteractionData","page":"Home","title":"Dizkord.InteractionData","text":"Data for an interaction. More details here.\n\nFields\n\nid             :: Nullable{Snowflake}\nname           :: String\ntype           :: Dizkord.ApplicationCommandType\nresolved       :: Optional{Dizkord.ResolvedData}\noptions        :: Optional{Vector{Dizkord.ApplicationCommandOption}}\ncustom_id      :: OptionalNullable{String}\ncomponent_type :: OptionalNullable{Dizkord.ComponentType}\nvalues         :: Optional{Vector{String}}\ntarget_id      :: Optional{Snowflake}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Invite","page":"Home","title":"Dizkord.Invite","text":"An invite to a Guild. More details here.\n\nFields\n\ncode                       :: String\nguild                      :: Optional{Dizkord.Guild}\nchannel                    :: Dizkord.DiscordChannel\napproximate_presence_cound :: Optional{Int}\napproximate_member_count   :: Optional{Int}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.InviteMetadata","page":"Home","title":"Dizkord.InviteMetadata","text":"Metadata for an Invite. More details here.\n\nFields\n\ninviter    :: Dizkord.User\nuses       :: Int\nmax_uses   :: Int\nmax_age    :: Int\ntemporary  :: Bool\ncreated_at :: DateTime\nrevoked    :: Bool\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.MFALevel","page":"Home","title":"Dizkord.MFALevel","text":"A Guild's MFA level. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Member","page":"Home","title":"Dizkord.Member","text":"A Guild member. More details here.\n\nFields\n\nuser          :: Optional{Dizkord.User}\nnick          :: OptionalNullable{String}\nroles         :: Vector{Snowflake}\njoined_at     :: DateTime\npremium_since :: OptionalNullable{DateTime}\ndeaf          :: Bool\nmute          :: Bool\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Message","page":"Home","title":"Dizkord.Message","text":"A message sent to a DiscordChannel. More details here.\n\nFields\n\nid               :: Snowflake\nchannel_id       :: Snowflake\nguild_id         :: Optional{Snowflake}\nauthor           :: Optional{Dizkord.User}\nmember           :: Optional{Dizkord.Member}\ncontent          :: Optional{String}\ntimestamp        :: Optional{DateTime}\nedited_timestamp :: OptionalNullable{DateTime}\ntts              :: Optional{Bool}\nmention_everyone :: Optional{Bool}\nmentions         :: Optional{Vector{Dizkord.User}}\nmention_roles    :: Optional{Vector{Snowflake}}\nattachments      :: Optional{Vector{Dizkord.Attachment}}\nembeds           :: Optional{Vector{Dizkord.Embed}}\nreactions        :: Optional{Vector{Dizkord.Reaction}}\nnonce            :: OptionalNullable{Snowflake}\npinned           :: Optional{Bool}\nwebhook_id       :: Optional{Snowflake}\ntype             :: Optional{Dizkord.MessageType}\nactivity         :: Optional{Dizkord.MessageActivity}\napplication      :: Optional{Dizkord.MessageApplication}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.MessageActivity","page":"Home","title":"Dizkord.MessageActivity","text":"A Message activity. More details here.\n\nFields\n\ntype     :: Dizkord.MessageActivityType\nparty_id :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.MessageActivityType","page":"Home","title":"Dizkord.MessageActivityType","text":"A Message's activity type. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.MessageApplication","page":"Home","title":"Dizkord.MessageApplication","text":"A Rich Presence Message's application information. More details here.\n\nFields\n\nid          :: Snowflake\ncover_image :: Optional{String}\ndescription :: String\nicon        :: String\nname        :: String\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.MessageNotificationLevel","page":"Home","title":"Dizkord.MessageNotificationLevel","text":"A Guild's default message notification level. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.MessageType","page":"Home","title":"Dizkord.MessageType","text":"A Message's type. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Overwrite","page":"Home","title":"Dizkord.Overwrite","text":"A permission overwrite. More details here.\n\nFields\n\nid    :: Snowflake\ntype  :: Dizkord.OverwriteType\nallow :: String\ndeny  :: String\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.OverwriteType","page":"Home","title":"Dizkord.OverwriteType","text":"An Overwrite's type. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Permission","page":"Home","title":"Dizkord.Permission","text":"Bitwise permission flags. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Presence","page":"Home","title":"Dizkord.Presence","text":"A User's presence. More details here.\n\nFields\n\nuser       :: Dizkord.User\nroles      :: Optional{Vector{Snowflake}}\ngame       :: Nullable{Dizkord.Activity}\nguild_id   :: Optional{Snowflake}\nstatus     :: Dizkord.PresenceStatus\nactivities :: Vector{Dizkord.Activity}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.PresenceStatus","page":"Home","title":"Dizkord.PresenceStatus","text":"A User's status sent in a Presence. Available values are PS_IDLE, PS_DND, PS_ONLINE, and PS_OFFLINE. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Reaction","page":"Home","title":"Dizkord.Reaction","text":"A Message reaction. More details here.\n\nFields\n\ncount :: Int\nme    :: Bool\nemoji :: Dizkord.Emoji\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Response","page":"Home","title":"Dizkord.Response","text":"A wrapper around a response from the REST API. Every function which wraps a Discord REST API endpoint returns a Future which will contain a value of this type. To retrieve the Response from the Future, use fetch. See also: fetchval.\n\nFields\n\nval::Nullable{T}: The object contained in the HTTP response. For example, for a call to get_channel_message, this value will be a Message.\nok::Bool: The state of the request. If true, then it is safe to access val.\nhttp_response::Nullable{HTTP.Messages.Response}: The underlying HTTP response, if a request was made.\nexception::Nullable{Exception}: The caught exception, if one is thrown.\n\nExamples\n\nMultiple API calls which immediately return Futures and can be awaited:\n\nfutures = map(i -> create_message(c, channel_id; content=string(i)), 1:10);\nother_work_here()\nresps = fetch.(futures)\n\nSkipping error checks and returning the value directly:\n\nguild = fetchval(create_guild(c; name=\"foo\"))\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Role","page":"Home","title":"Dizkord.Role","text":"A User role. More details here.\n\nFields\n\nid          :: Snowflake\nname        :: String\ncolor       :: Optional{Int}\nhoist       :: Optional{Bool}\nposition    :: Optional{Int}\npermissions :: Optional{String}\nmanaged     :: Optional{Bool}\nmentionable :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.UnavailableGuild","page":"Home","title":"Dizkord.UnavailableGuild","text":"An unavailable Discord guild (server). More details here.\n\nFields\n\nid          :: Snowflake\nunavailable :: Optional{Bool}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.User","page":"Home","title":"Dizkord.User","text":"A Discord user. More details here.\n\nFields\n\nid            :: Snowflake\nusername      :: Optional{String}\ndiscriminator :: Optional{String}\navatar        :: OptionalNullable{String}\nbot           :: Optional{Bool}\nmfa_enabled   :: Optional{Bool}\nlocale        :: Optional{String}\nverified      :: Optional{Bool}\nemail         :: OptionalNullable{String}\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.VerificationLevel","page":"Home","title":"Dizkord.VerificationLevel","text":"A Guild's verification level. More details here.\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.VoiceRegion","page":"Home","title":"Dizkord.VoiceRegion","text":"A region for a Guild's voice server. More details here.\n\nFields\n\nid         :: String\nname       :: String\nvip        :: Bool\noptimal    :: Bool\ndeprecated :: Bool\ncustom     :: Bool\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.VoiceState","page":"Home","title":"Dizkord.VoiceState","text":"A User's voice connection status. More details here.\n\nFields\n\nguild_id   :: Optional{Snowflake}\nchannel_id :: Nullable{Snowflake}\nuser_id    :: Snowflake\nmember     :: Optional{Dizkord.Member}\nsession_id :: String\ndeaf       :: Bool\nmute       :: Bool\nself_deaf  :: Bool\nself_mute  :: Bool\nsuppress   :: Bool\n\n\n\n\n\n","category":"type"},{"location":"#Dizkord.Webhook","page":"Home","title":"Dizkord.Webhook","text":"A Webhook. More details here.\n\nFields\n\nid         :: Snowflake\nguild_id   :: Optional{Snowflake}\nchannel_id :: Snowflake\nuser       :: Optional{Dizkord.User}\nname       :: Nullable{String}\navatar     :: Nullable{String}\ntoken      :: Optional{String}\n\n\n\n\n\n","category":"type"},{"location":"#Base.close-Tuple{Client}","page":"Home","title":"Base.close","text":"close(c::Client)\n\nDisconnect the Client from the gateway.\n\n\n\n\n\n","category":"method"},{"location":"#Base.isopen-Tuple{Client}","page":"Home","title":"Base.isopen","text":"isopen(c::Client) -> Bool\n\nDetermine whether the Client is connected to the gateway.\n\n\n\n\n\n","category":"method"},{"location":"#Base.open-Tuple{Client}","page":"Home","title":"Base.open","text":"open(c::Client; delay::Period=Second(7))\n\nConnect a Client to the Discord gateway.\n\nThe delay keyword is the time between shards connecting. It can be increased from its default if you are using multiple shards and frequently experiencing invalid sessions upon  connection.\n\n\n\n\n\n","category":"method"},{"location":"#Base.wait-Tuple{Client}","page":"Home","title":"Base.wait","text":"wait(c::Client)\n\nWait for an open Client to close.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.add_guild_member-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.add_guild_member","text":"add_guild_member(c::Client; kwargs...) -> Member\n\nAdd a User to a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.add_guild_member_role-Tuple{Client, Integer, Integer, Integer}","page":"Home","title":"Dizkord.add_guild_member_role","text":"add_guild_member_role(c::Client, guild::Integer, user::Integer, role::Integer)\n\nAdd a Role to a Member.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.add_pinned_channel_message-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.add_pinned_channel_message","text":"add_pinned_channel_message(c::Client, channel::Integer, message::Integer)\n\nPin a Message in a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.begin_guild_prune-Tuple{Client, Integer}","page":"Home","title":"Dizkord.begin_guild_prune","text":"begin_guild_prune(c::Client, guild::Integer; kwargs...) -> Dict\n\nBegin pruning Members from a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.bulk_delete_messages-Tuple{Client, Integer}","page":"Home","title":"Dizkord.bulk_delete_messages","text":"bulk_delete_messages(c::Client, channel::Integer; kwargs...)\n\nDelete multiple Messages. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.command!-Tuple{Function, Client, AbstractString, AbstractString}","page":"Home","title":"Dizkord.command!","text":"command!(\n    f::Function\n    c::Client\n    name::AbstractString\n    description::AbstractString;\n    kwargs...\n)\n\nAdds a handler for INTERACTION CREATE gateway events where the InteractionData's name field matches name. Adds this command to c.commands or c.guild_commands based on the presence of guild. The f parameter signature should be:\n\n    (ctx::Context) -> Any \n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create","page":"Home","title":"Dizkord.create","text":"create(c::Client, ::Type{T}, args...; kwargs...) -> Future{Response}\n\nCreate, add, send, etc.\n\nExamples\n\nSending a Message:\n\ncreate(c, Message, channel; content=\"foo\")\n\nCreating a new DiscordChannel:\n\ncreate(c, DiscordChannel, guild; name=\"bar\")\n\nBanning a Member:\n\ncreate(c, Ban, guild, member; reason=\"baz\")\n\n\n\n\n\n","category":"function"},{"location":"#Dizkord.create_channel_invite-Tuple{Client, Integer, Vararg{Any, N} where N}","page":"Home","title":"Dizkord.create_channel_invite","text":"create_channel_invite(c::Client, channel::Integer; kwargs...) -> Invite\n\nCreate an Invite to a DiscordChannel. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create_dm-Tuple{Client}","page":"Home","title":"Dizkord.create_dm","text":"create_dm(c::Client; kwargs...) -> DiscordChannel\n\nCreate a DM DiscordChannel. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create_guild-Tuple{Client}","page":"Home","title":"Dizkord.create_guild","text":"create_guild(c::Client; kwargs...) -> Guild\n\nCreate a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create_guild_ban-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.create_guild_ban","text":"create_guild_ban(c::Client, guild::Integer, user::Integer; kwargs...)\n\nBan a Member from a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create_guild_channel-Tuple{Client, Integer}","page":"Home","title":"Dizkord.create_guild_channel","text":"create_guild_channel(c::Client, guild::Integer; kwargs...) -> DiscordChannel\n\nCreate a DiscordChannel in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create_guild_emoji-Tuple{Client, Integer}","page":"Home","title":"Dizkord.create_guild_emoji","text":"create_guild_emoji(c::Client, guild::Integer; kwargs...) -> Emoji\n\nCreate an Emoji in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create_guild_integration-Tuple{Client, Integer}","page":"Home","title":"Dizkord.create_guild_integration","text":"create_guild_integration(c::Client, guild::Integer; kwargs...)\n\nCreate/attach an Integration to a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create_guild_role-Tuple{Client, Integer}","page":"Home","title":"Dizkord.create_guild_role","text":"create_guild_role(c::Client, guild::Integer; kwargs) -> Role\n\nCreate a Role in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create_message-Tuple{Client, Integer}","page":"Home","title":"Dizkord.create_message","text":"create_message(c::Client, channel::Integer; kwargs...) -> Message\n\nSend a Message to a DiscordChannel. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create_reaction-Tuple{Client, Integer, Integer, Union{AbstractChar, AbstractString}}","page":"Home","title":"Dizkord.create_reaction","text":"create_reaction(c::Client, channel::Integer, message::Integer, emoji::StringOrChar)\n\nReact to a Message. If emoji is a custom Emoji, it should be formatted \"name:id\".\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.create_webhook-Tuple{Client, Integer}","page":"Home","title":"Dizkord.create_webhook","text":"create_webhook(c::Client, channel::Integer; kwargs...) -> Webhook\n\nCreate a Webhook in a DiscordChannel. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete","page":"Home","title":"Dizkord.delete","text":"delete(c::Client, x::T, args...) -> Future{Response}\n\nDelete, remove, discard, etc.\n\nExamples\n\nKicking a Member:\n\ndelete(c, member)\n\nUnbanning a Member:\n\ndelete(c, ban, guild)\n\nDeleting all Reactions from a Message (note: this is the only update/delete method which takes a type parameter):\n\ndelete(c, Reaction, message)\n\n\n\n\n\n","category":"function"},{"location":"#Dizkord.delete_all_reactions-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.delete_all_reactions","text":"delete_all_reactions(c::Client, channel::Integer, message::Integer)\n\nDelete all reactions from a Message.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_channel-Tuple{Client, Integer}","page":"Home","title":"Dizkord.delete_channel","text":"delete_channel(c::Client, channel::Integer) -> DiscordChannel\n\nDelete a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_channel_permission-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.delete_channel_permission","text":"delete_channel_permission(c::Client, channel::Integer, overwrite::Integer)\n\nDelete an Overwrite from a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_guild-Tuple{Client, Integer}","page":"Home","title":"Dizkord.delete_guild","text":"delete_guild(c::Client, guild::Integer)\n\nDelete a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_guild_emoji-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.delete_guild_emoji","text":"delete_guild_emoji(c::Client, guild::Integer, emoji::Integer)\n\nDelete an Emoji from a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_guild_integration-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.delete_guild_integration","text":"delete_guild_integration(c::Client, guild::Integer, integration::Integer)\n\nDelete an Integration from a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_guild_role-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.delete_guild_role","text":"delete_guild_role(c::Client, guild::Integer, role::Integer)\n\nDelete a Role from a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_invite-Tuple{Client, AbstractString}","page":"Home","title":"Dizkord.delete_invite","text":"delete_invite(c::Client, invite::AbstractString) -> Invite\n\nDelete an Invite to a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_message-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.delete_message","text":"delete_message(c::Client, channel::Integer, message::Integer)\n\nDelete a Message.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_own_reaction-Tuple{Client, Integer, Integer, Union{AbstractChar, AbstractString}}","page":"Home","title":"Dizkord.delete_own_reaction","text":"delete_own_reaction(c::Client, channel::Integer, message::Integer, emoji::StringOrChar)\n\nDelete the Client user's reaction to a Message.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_pinned_channel_message-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.delete_pinned_channel_message","text":"delete_pinned_channel_message(c::Client, channel::Integer, message::Integer)\n\nUnpin a Message from a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_user_reaction-Tuple{Client, Integer, Integer, Union{AbstractChar, AbstractString}, Integer}","page":"Home","title":"Dizkord.delete_user_reaction","text":"delete_user_reaction(\n    c::Client,\n    channel::Integer,\n    message::Integer,\n    emoji::StringOrChar,\n    user::Integer,\n)\n\nDelete a User's reaction to a Message.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_webhook-Tuple{Client, Integer}","page":"Home","title":"Dizkord.delete_webhook","text":"delete_webhook(c::Client, webhook::Integer)\n\nDelete a Webhook.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.delete_webhook_with_token-Tuple{Client, Integer, AbstractString}","page":"Home","title":"Dizkord.delete_webhook_with_token","text":"delete_webhook_with_token(c::Client, webhook::Integer, token::AbstractString)\n\nDelete a Webhook with a token.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.disable_cache!-Tuple{Client}","page":"Home","title":"Dizkord.disable_cache!","text":"disable_cache!(c::Client)\ndisable_cache!(f::Function, c::Client)\n\nDisable the cache. do syntax is also accepted.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.edit_channel_permissions-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.edit_channel_permissions","text":"edit_channel_permissions(\n    c::Client,\n    channel::Integer,\n    overwrite::Integer;\n    kwargs...,\n)\n\nEdit permissions for a DiscordChannel. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.edit_message-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.edit_message","text":"edit_message(c::Client, channel::Integer, message::Integer; kwargs...) -> Message\n\nEdit a Message. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.enable_cache!-Tuple{Client}","page":"Home","title":"Dizkord.enable_cache!","text":"enable_cache!(c::Client)\nenable_cache!(f::Function c::Client)\n\nEnable the cache. do syntax is also accepted.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.execute_github_compatible_webhook-Tuple{Client, Integer, AbstractString}","page":"Home","title":"Dizkord.execute_github_compatible_webhook","text":"execute_github_compatible_webhook(\n    c::Client,\n    webhook::Integer,\n    token::AbstractString;\n    wait::Bool=true,\n    kwargs...,\n)\n\nExecute a Github Webhook. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.execute_slack_compatible_webhook-Tuple{Client, Integer, AbstractString}","page":"Home","title":"Dizkord.execute_slack_compatible_webhook","text":"execute_slack_compatible_webhook(\n    c::Client,\n    webhook::Integer,\n    token::AbstractString;\n    wait::Bool=true,\n    kwargs...,\n)\n\nExecute a Slack Webhook. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.execute_webhook-Tuple{Client, Integer, AbstractString}","page":"Home","title":"Dizkord.execute_webhook","text":"execute_webhook(\n    c::Client,\n    webhook::Integer,\n    token::AbstractString;\n    wait::Bool=false,\n    kwargs...,\n) -> Message\n\nExecute a Webhook. If wait is not set, no Message is returned. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.fetchval-Tuple{Distributed.Future}","page":"Home","title":"Dizkord.fetchval","text":"fetchval(f::Future{Response{T}}) -> Nullable{T}\n\nShortcut for fetch(f).val: Fetch a Response and return its value. Note that there are no guarantees about the response's success and the value being returned, and it discards context that can be useful for debugging, such as HTTP responses and caught exceptions.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.filter_ranges-Tuple{Vector{UnitRange{Int64}}}","page":"Home","title":"Dizkord.filter_ranges","text":"filter_ranges(u::Vector{UnitRange{Int}})\n\nFilter a list of ranges, discarding ranges included in other ranges from the list.\n\nExample\n\njulia> Dizkord.filter_ranges([1:5, 3:8, 1:20, 2:16, 10:70, 25:60, 5:35, 50:90, 10:70])\n4-element Vector{UnitRange{Int64}}:\n 1:20\n 5:35\n 50:90\n 10:70\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_channel-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_channel","text":"get_channel(c::Client, channel::Integer) -> DiscordChannel\n\nGet a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_channel_invites-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_channel_invites","text":"get_channel_invites(c::Client, channel::Integer) -> Vector{Invite}\n\nGet the Invites for a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_channel_message-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.get_channel_message","text":"get_channel_message(c::Client, channel::Integer, message::Integer) -> Message\n\nGet a Message from a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_channel_messages-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_channel_messages","text":"get_channel_messages(c::Client, channel::Integer; kwargs...) -> Vector{Message}\n\nGet a list of Messages from a DiscordChannel. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_channel_webhooks-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_channel_webhooks","text":"get_channel_webhooks(c::Client, channel::Integer) -> Vector{Webhook}\n\nGet a list of Webhooks in a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_current_user-Tuple{Client}","page":"Home","title":"Dizkord.get_current_user","text":"get_current_user(c::Client) -> User\n\nGet the Client User.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_current_user_guilds-Tuple{Client}","page":"Home","title":"Dizkord.get_current_user_guilds","text":"get_user_guilds(c::Client; kwargs...) -> Vector{Guild}\n\nGet a list of Guilds the Client User is a member of. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild","text":"get_guild(c::Client, guild::Integer) -> Guild\n\nGet a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_audit_log-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_audit_log","text":"get_guild_audit_log(c::Client, guild::Integer; kwargs...) -> AuditLog\n\nGet a Guild's AuditLog. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_ban-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.get_guild_ban","text":"get_ban(c::Client, guild::Integer,  user::Integer) -> Ban\n\nGet a Ban in a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_bans-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_bans","text":"get_guild_bans(c::Client, guild::Integer) -> Vector{Ban}\n\nGet a list of Bans in a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_channels-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_channels","text":"get_guild_channels(c::Client, guild::Integer) -> Vector{DiscordChannel}\n\nGet the DiscordChannels in a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_embed-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_embed","text":"get_guild_embed(c::Client, guild::Integer) -> GuildEmbed\n\nGet a Guild's GuildEmbed.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_emoji-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.get_guild_emoji","text":"get_guild_emoji(c::Client, guild::Integer, emoji::Integer) -> Emoji\n\nGet an Emoji in a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_integrations-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_integrations","text":"get_guild_integrations(c::Client, guild::Integer) -> Vector{Integration}\n\nGet a list of Integrations for a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_invites-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_invites","text":"get_guild_invites(c::Client, guild::Integer) -> Vector{Invite}\n\nGet a list of Invites to a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_member-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.get_guild_member","text":"get_guild_member(c::Client, guild::Integer, user::Integer) -> Member\n\nGet a Member in a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_prune_count-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_prune_count","text":"get_guild_prune_count(c::Client, guild::Integer; kwargs...) -> Dict\n\nGet the number of Members that would be removed from a Guild in a prune. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_roles-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_roles","text":"get_guild_roles(c::Client, guild::Integer) -> Vector{Role}\n\nGet a Guild's Roles.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_voice_regions-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_voice_regions","text":"get_guild_voice_regions(c::Client, guild::Integer) -> Vector{VoiceRegion}\n\nGet a list of VoiceRegions for the Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_webhooks-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_webhooks","text":"get_guild_webhooks(c::Client, guild::Integer) -> Vector{Webhook}\n\nGet a list of Webhooks in a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_guild_widget_image-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_guild_widget_image","text":"get_guild_widget_image(c::Client, guild::Integer; kwargs...) -> Vector{UInt8}\n\nGet a Guild's widget image in PNG format. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_invite-Tuple{Client, AbstractString}","page":"Home","title":"Dizkord.get_invite","text":"get_invite(c::Client, invite::AbstractString; kwargs...} -> Invite\n\nGet an Invite to a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_pinned_messages-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_pinned_messages","text":"get_pinned_messages(c::Client, channel::Integer) -> Vector{Message}\n\nGet the pinned Messages in a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_reactions-Tuple{Client, Integer, Integer, Union{AbstractChar, AbstractString}}","page":"Home","title":"Dizkord.get_reactions","text":"get_reactions(\n    c::Client,\n    channel::Integer,\n    message::Integer,\n    emoji::StringOrChar,\n) -> Vector{User}\n\nGet the Users who reacted to a Message with an Emoji.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_user-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_user","text":"get_user(c::Client, user::Integer) -> User\n\nGet a User.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_vanity_url-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_vanity_url","text":"get_vanity_url(c::Client, guild::Integer) -> Invite\n\nGet a Guild's vanity URL, if it supports that feature.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_webhook-Tuple{Client, Integer}","page":"Home","title":"Dizkord.get_webhook","text":"get_webhook(c::Client, webhook::Integer) -> Webhook\n\nGet a Webhook.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.get_webhook_with_token-Tuple{Client, Integer, AbstractString}","page":"Home","title":"Dizkord.get_webhook_with_token","text":"get_webhook_with_token(c::Client, webhook::Integer, token::AbstractString) -> Webhook\n\nGet a Webhook with a token.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.handle-Tuple{Client, Symbol, Dict}","page":"Home","title":"Dizkord.handle","text":"Calls handle with a list of all found handlers.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.handle-Tuple{Client, Vector{Dizkord.Handler}, Dict, Symbol}","page":"Home","title":"Dizkord.handle","text":"handle(\n    c::Client\n    handlers,\n    data\n)\n\nDetermines whether handlers are appropriate to call and calls them if so. Creates an AbstractContext based on the event using the data provided and passes it to the handler.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.has_permission-Tuple{Integer, Dizkord.Permission}","page":"Home","title":"Dizkord.has_permission","text":"has_permission(perms::Integer, perm::Permission) -> Bool\n\nDetermine whether a bitwise OR of permissions contains one Permission.\n\nExamples\n\njulia> has_permission(0x0420, PERM_VIEW_CHANNEL)\ntrue\n\njulia> has_permission(0x0420, PERM_ADMINISTRATOR)\nfalse\n\njulia> has_permission(0x0008, PERM_MANAGE_ROLES)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.heartbeat_ping-Tuple{Client}","page":"Home","title":"Dizkord.heartbeat_ping","text":"heartbeat_ping(c::Client) -> Nullable{Period}\n\nGet the Client's ping time to the gateway. If the client is not connected, or no heartbeats have been sent/acknowledged, nothing is returned.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.leave_guild-Tuple{Client, Integer}","page":"Home","title":"Dizkord.leave_guild","text":"leave_guild(c::Client, guild::Integer)\n\nLeave a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.list_guild_emojis-Tuple{Client, Integer}","page":"Home","title":"Dizkord.list_guild_emojis","text":"list_guild_emojis(c::Client, guild::Integer) -> Vector{Emoji}\n\nGet the Emojis in a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.list_guild_members-Tuple{Client, Integer}","page":"Home","title":"Dizkord.list_guild_members","text":"list_guild_members(c::Client, guild::Integer; kwargs...) -> Vector{Member}\n\nGet a list of Members in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.list_voice_regions-Tuple{Client}","page":"Home","title":"Dizkord.list_voice_regions","text":"list_voice_regions(c::Client) -> Vector{VoiceRegion}\n\nGet a list of the VoiceRegions that can be used when creating Guilds.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.me-Tuple{Client}","page":"Home","title":"Dizkord.me","text":"me(c::Client) -> Nullable{User}\n\nGet the Client's bot user.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.mention-Tuple{User}","page":"Home","title":"Dizkord.mention","text":"mention(\n    o::DiscordObject\n)\n\nGenerates the plaintext mention for a User, a Member, a DiscordChannel, or a Role\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_channel-Tuple{Client, Integer}","page":"Home","title":"Dizkord.modify_channel","text":"modify_channel(c::Client, channel::Integer; kwargs...) -> DiscordChannel\n\nModify a DiscordChannel. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_current_user-Tuple{Client}","page":"Home","title":"Dizkord.modify_current_user","text":"modify_current_user(c::Client; kwargs...) -> User\n\nModify the Client User. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_current_user_nick-Tuple{Client, Integer}","page":"Home","title":"Dizkord.modify_current_user_nick","text":"modify_current_user_nick(c::Client, guild::Intger; kwargs...) -> String\n\nModify the Client user's nickname in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_guild-Tuple{Client, Integer}","page":"Home","title":"Dizkord.modify_guild","text":"modify_guild(c::Client, guild::Integer; kwargs...) -> Guild\n\nEdit a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_guild_channel_positions-Tuple{Client, Integer, Vararg{Any, N} where N}","page":"Home","title":"Dizkord.modify_guild_channel_positions","text":"modify_guild_channel_positions(c::Client, guild::Integer, positions...)\n\nModify the positions of DiscordChannels in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_guild_embed-Tuple{Client, Integer}","page":"Home","title":"Dizkord.modify_guild_embed","text":"modify_guild_embed(c::Client, guild::Integer; kwargs...) -> GuildEmbed\n\nModify a Guild's GuildEmbed. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_guild_emoji-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.modify_guild_emoji","text":"modify_guild_emoji(c::Client, guild::Integer, emoji::Integer; kwargs...) -> Emoji\n\nEdit an Emoji in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_guild_integration-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.modify_guild_integration","text":"modify_guild_integration(c::Client, guild::Integer, integration::Integer; kwargs...)\n\nModify an Integration in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_guild_member-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.modify_guild_member","text":"modify_guild__member(c::Client, guild::Integer, user::Integer; kwargs...)\n\nModify a Member in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_guild_role-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.modify_guild_role","text":"modify_guild_role(c::Client, guild::Integer, role::Integer; kwargs) -> Role\n\nModify a Role in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_guild_role_positions-Tuple{Client, Integer, Vararg{Any, N} where N}","page":"Home","title":"Dizkord.modify_guild_role_positions","text":"modify_guild_role_positions(c::Client, guild::Integer, positions...) -> Vector{Role}\n\nModify the positions of Roles in a Guild. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_webhook-Tuple{Client, Integer}","page":"Home","title":"Dizkord.modify_webhook","text":"modify_webhook(c::Client, webhook::Integer; kwargs...) -> Webhook\n\nModify a Webhook. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.modify_webhook_with_token-Tuple{Client, Integer, AbstractString}","page":"Home","title":"Dizkord.modify_webhook_with_token","text":"modify_webhook_with_token(\n    c::Client,\n    webhook::Integer,\n    token::AbstractString;\n    kwargs...,\n) -> Webhook\n\nModify a Webhook with a token. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.on_message!-Tuple{Function, Client}","page":"Home","title":"Dizkord.on_message!","text":"on_message!(\n    f::Function\n    c::Client\n)\n\nAdds a handler for the MESSAGE_CREATE gateway event. The f parameter's signature should be:\n\n    (ctx::Context) -> Any \n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.on_ready!-Tuple{Function, Client}","page":"Home","title":"Dizkord.on_ready!","text":"on_ready!(\n    f::Function\n    c::Client\n)\n\nAdds a handler for the READY gateway event. The f parameter signature should be:\n\n    (ctx::Context) -> Any \n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.permissions_in-Tuple{Member, Guild, DiscordChannel}","page":"Home","title":"Dizkord.permissions_in","text":"permissions_in(m::Member, g::Guild, ch::DiscordChannel) -> Int64\n\nCompute a Member's Permissions in a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.plaintext-Tuple{Message}","page":"Home","title":"Dizkord.plaintext","text":"plaintext(m::Message) -> String\nplaintext(c::Client, m::Message) -> String\n\nGet the Message contents with any User mentions replaced with their plaintext. If a Client is provided, DiscordChannels Role are also replaced. However, only channels and roles stored in state are replaced; no API requests are made.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.remove_guild_ban-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.remove_guild_ban","text":"remove_guild_ban(c::Client, guild::Integer, user::Integer)\n\nUnban a User from a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.remove_guild_member-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.remove_guild_member","text":"remove_guild_member(c::Client, guild::Integer, user::Integer)\n\nKick a Member from a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.remove_guild_member_role-Tuple{Client, Integer, Integer, Integer}","page":"Home","title":"Dizkord.remove_guild_member_role","text":"remove_guild_member_role(c::Client, guild::Integer, user::Integer, role::Integer)\n\nRemove a Role from a Member.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.reply-Tuple{Client, Message}","page":"Home","title":"Dizkord.reply","text":"reply(\n    c::Client\n    context;\n    kwargs...\n)\n\nReplies to a AbstractContext, an Interaction or a Message.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.request_guild_members-Tuple{Client, Integer}","page":"Home","title":"Dizkord.request_guild_members","text":"request_guild_members(\n    c::Client,\n    guilds::Union{Integer, Vector{<:Integer};\n    query::AbstractString=\"\",\n    limit::Int=0,\n) -> Bool\n\nRequest offline guild members of one or more Guilds. GuildMembersChunk events are sent by the gateway in response. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.retrieve","page":"Home","title":"Dizkord.retrieve","text":"retrieve(c::Client, ::Type{T}, args...; kwargs...) -> Future{Response}\n\nRetrieve, get, list, etc.\n\nExamples\n\nGetting the Client's User:\n\nretrieve(c, User)\n\nGetting a Guild's DiscordChannels:\n\nretrieve(c, DiscordChannel, guild)\n\nGetting an Invite to a Guild by code:\n\nretrieve(c, Invite, \"abcdef\")\n\n\n\n\n\n","category":"function"},{"location":"#Dizkord.set_game-Tuple{Client, AbstractString}","page":"Home","title":"Dizkord.set_game","text":"set_game(\n    c::Client,\n    game::AbstractString;\n    type::Union{ActivityType, Int}=AT_GAME,\n    since::Nullable{Int}=c.presence[\"since\"],\n    status::Union{PresenceStatus, AbstractString}=c.presence[\"status\"],\n    afk::Bool=c.presence[\"afk\"],\n    kwargs...,\n) -> Bool\n\nShortcut for update_status to set the Client's Activity. Any additional keywords are passed into the activity section.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.split_message-Tuple{AbstractString}","page":"Home","title":"Dizkord.split_message","text":"split_message(text::AbstractString; chunk_limit::UInt=2000,\n              extrastyles::Vector{Regex}=Vector{Regex}(),\n              forcesplit::Bool = true) -> Vector{String}\n\nSplit a message into chunks with at most chunk_limit length, preserving formatting.\n\nThe chunk_limit has as default the 2000 character limit of Discord's messages, but can be changed to any nonnegative integer.\n\nFormatting is specified by STYLES) and can be aggregated with the extrastyles argument.\n\nDiscord limits messages to 2000, so the code forces split if format breaking cannot be avoided. If desired, however, this behavior can be lifter by setting forcesplit to false.\n\nExamples\n\n```jldoctest; setup=:(using Dizkord) julia> split_message(\"foo\") 1-element Vector{String}:  \"foo\"\n\njulia> split_message(repeat('.', 1995) * \"hello, world\")[2] \"hello, world\"\n\njulia> splitmessage(\"hello, world\", chunklimit=10) 2-element Vector{String}:  \"hello,\"  \"world\"\n\njulia> splitmessage(\"hello, _beautiful world\", chunklimit=15) ┌ Warning: message was forced-split to fit the desired chunk length limit 15 └ @ Main REPL[66]:28 3-element Vector{String}:  \"hello,\"  \"beautiful wo\"  \"rld_\"\n\njulia> splitmessage(\"hello, _beautiful world\", chunklimit=15, forcesplit=false) ┌ Warning: message could not be split into chunks smaller than the length limit 15 └ @ Main REPL[66]:32 2-element Vector{String}:  \"hello,\"  \"beautiful world_\"\n\njulia> split_message(\"hello\n\n\", 12) 2-element Vector{String}:  \"hello ==\"  \"===\"\n\njulia> splitmessage(\"hello ≡≡≡≡≡ \", chunklimit=12, extrastyles = [r\" ≡+ \"]) 2-element Vector{String}:  \"hello\"  \"≡≡≡≡≡\"\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.sync_guild_integration-Tuple{Client, Integer, Integer}","page":"Home","title":"Dizkord.sync_guild_integration","text":"sync_guild_integration(c::Client, guild::Integer, integration::Integer)\n\nSync an Integration in a Guild.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.trigger_typing_indicator-Tuple{Client, Integer}","page":"Home","title":"Dizkord.trigger_typing_indicator","text":"trigger_typing_indicator(c::Client, channel::Integer)\n\nTrigger the typing indicator in a DiscordChannel.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.update","page":"Home","title":"Dizkord.update","text":"update(c::Client, x::T, args...; kwargs...) -> Future{Response}\n\nUpdate, edit, modify, etc.\n\nExamples\n\nEditing a Message:\n\nupdate(c, message; content=\"foo2\")\n\nModifying a Webhook:\n\nupdate(c, webhook; name=\"bar2\")\n\nUpdating a Role:\n\nupdate(c, role, guild; permissions=8)\n\n\n\n\n\n","category":"function"},{"location":"#Dizkord.update_status-Tuple{Client, Union{Nothing, Int64}, Union{Nothing, Activity, Dict, NamedTuple}, Union{Dizkord.PresenceStatus, AbstractString}, Bool}","page":"Home","title":"Dizkord.update_status","text":"update_status(\n    c::Client,\n    since::Nullable{Int},\n    activity::Nullable{Activity},\n    status::Union{PresenceStatus, AbstractString},\n    afk::Bool,\n) -> Bool\n\nIndicate a presence or status update. A PresenceUpdate event is sent by the gateway in response. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.update_voice_state-Tuple{Client, Integer, Union{Nothing, Integer}, Bool, Bool}","page":"Home","title":"Dizkord.update_voice_state","text":"update_voice_state(\n    c::Client,\n    guild::Integer,\n    channel::Nullable{Integer},\n    mute::Bool,\n    deaf::Bool,\n) -> Bool\n\nJoin, move, or disconnect from a voice channel. A VoiceStateUpdate event is sent by the gateway in response. More details here.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.upload_file-Tuple{Client, DiscordChannel, AbstractString}","page":"Home","title":"Dizkord.upload_file","text":"upload_file(c::Client, ch::DiscordChannel, path::AbstractString; kwargs...) -> Message\n\nSend a Message with a file Attachment. Any keywords are passed on to create_message.\n\n\n\n\n\n","category":"method"},{"location":"#Dizkord.@deferred_fetch-Tuple","page":"Home","title":"Dizkord.@deferred_fetch","text":"@deferred_fetch [functions...] block\n\nIdentical to @fetch, but Futures are not fetched until the end of the block. This is more efficient, but only works when there are no data dependencies in the block.\n\nExamples\n\nThis will work:\n\n@deferred_fetch begin\n    guild_resp = create(c, Guild; name=\"foo\")\n    channel_resp = retrieve(c, DiscordChannel, 123)\nend\n\nThis will not, because the second call is dependent on the first value:\n\n@deferred_fetch begin\n    guild_resp = create(c, Guild; name=\"foo\")\n    channels_resp = retrieve(c, DiscordChannel, guild_resp.val)\nend\n\n\n\n\n\n","category":"macro"},{"location":"#Dizkord.@deferred_fetchval-Tuple","page":"Home","title":"Dizkord.@deferred_fetchval","text":"@deferred_fetchval [functions...] block\n\nIdentical to @deferred_fetch, but Futures have fetchval called on them instead of fetch.\n\n\n\n\n\n","category":"macro"},{"location":"#Dizkord.@fetch-Tuple","page":"Home","title":"Dizkord.@fetch","text":"@fetch [functions...] block\n\nWrap all calls to the specified CRUD functions (create, retrieve, update, and delete) with fetch inside a block. If no functions are specified, all CRUD functions are wrapped.\n\nExamples\n\nWrapping all CRUD functions:\n\n@fetch begin\n    guild_resp = create(c, Guild; name=\"foo\")\n    guild_resp.ok || error(\"Request for new guild failed\")\n    channel_resp = retrieve(c, DiscordChannel, guild_resp.val)\nend\n\nWrapping only calls to retrieve:\n\n@fetch retrieve begin\n    resp = retrieve(c, DiscordChannel, 123)\n    future = create(c, Message, resp.val; content=\"foo\")  # Behaves normally.\nend\n\n\n\n\n\n","category":"macro"},{"location":"#Dizkord.@fetchval-Tuple","page":"Home","title":"Dizkord.@fetchval","text":"@fetchval [functions...] block\n\nIdentical to @fetch, but calls are wrapped with fetchval instead.\n\n\n\n\n\n","category":"macro"}]
}
